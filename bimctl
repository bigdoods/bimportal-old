#!/bin/bash

# get the directory the script is running from and follow symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
BIM_INSTALLATION="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# a file that can override and set variables
export BIM_CONFIG=${BIM_CONFIG:=/etc/bim/config}

if [[ -f $BIM_CONFIG ]]; then
	source $BIM_CONFIG
fi

export DOCKER_HOST=${DOCKER_HOST:=unix:///var/run/docker.sock}

composecommands=("kill" "logs" "port" "ps" "pull" "rm" "run" "start" "stop" "up" "build")

array_contains () {
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done
    return $in
}

run-docker-compose() {
	(cd $BIM_INSTALLATION; COMPOSE_PROJECT_NAME=bim docker-compose $@)
}

cmd-test() {
	case "$1" in
	all)
		cmd-test unit
		cmd-test integration
		cmd-test acceptance
;;
unit)
	echo "unit tests"
;;
integration)
	echo "integration tests"
;;
acceptance)
	# first run the core bimctl tests
	bats --tap $BIM_INSTALLATION/test/vagrant
	# now see if there is a test folder
	if [[ -d $PWD/test ]]; then
		bats --tap $PWD/test
	fi
;;
	*)
		usage test
;;
	esac
}

cmd-status() {
	docker status
}

cmd-configure() {
	echo configure
}

usage() {
	case "$1" in
	test)
cat <<EOF
Usage:
bimctl test <all|acceptance|integration|unit>
EOF
;;
	*)
cat <<EOF
Usage:
bimctl help [command]
bimctl test <all|acceptance|integration|unit>
bimctl status
bimctl configure
EOF

for i in "${composecommands[@]}"
do
   echo "bimctl $i"
done
;;
	esac
}

controller() {
	local composecommand=$(array_contains composecommands $1)
	shift
	if [[ $composecommand ]]; then
		echo CMPOSE
	else
		usage
	fi
}

main() {
	case "$1" in
	test)					      shift; cmd-test $@;;
	status)             shift; cmd-status $@;;
	configure)          shift; cmd-configure $@;;
	help)               shift; usage $@;;
	*)                  controller $@;;
	esac
}

main "$@"
